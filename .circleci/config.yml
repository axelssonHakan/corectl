version: 2
jobs:
  build:
    working_directory: /go/src/github.com/qlik-oss/core-cli
    docker:
      - image: circleci/golang:1.9
    steps:
      - checkout
      - run: go get -u github.com/golang/dep/cmd/dep
      - run: go get -u github.com/golang/lint/golint
      - restore_cache:
          key: dependency-cache-{{ checksum "Gopkg.lock" }}
      - run: 
          name: Install dependencies
          command: dep ensure
      - save_cache:
          key: dependency-cache-{{ checksum "Gopkg.lock" }}
          paths:
            - vendor
      # - run:
      #     name: Linting
      #     command: golint -set_exit_status
      - run:
          name: Build
          command: go build
      - run:
          name: Test
          command: go test -v -race ./...
      - setup_remote_docker
      - run:
          name: Login to Docker
          command: docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD"
      - run:
          name: Start QIX Engine
          command: ACCEPT_EULA=yes docker-compose -f test/docker-compose.yml up -d
      - run:
          name: Check that QIX Engine is up and running
          command: |
              set +e
              # Check that Engine is running
              ENGINE_ID=$(docker ps -aqf "name=engine")
              echo "Engine container id is $ENGINE_ID"
              RETRIES=0
              while [[ "$ENGINE_STATUS" != "running" && $RETRIES -le 30 ]]; do
                ENGINE_STATUS=$(docker inspect -f '{{.State.Status}}' "$ENGINE_ID")
                echo "Engine status is $ENGINE_STATUS"
                sleep 2
                RETRIES=$[$RETRIES+1]
              done
              if [[ "$ENGINE_STATUS" != "running"  ]]; then
                echo "QIX Engine did not start up properly"
                exit 1
              fi
      - run:
          name: Integration Test
          working_directory: /go
          command: |
              set +e
              ENGINE_CONTAINER_ID=$(docker ps -aqf "name=engine")
              TEST_CONTAINER_ID=$(docker run -d golang:1.9-alpine tail -f /dev/null)
              ENGINE_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $ENGINE_CONTAINER_ID)
              # ENGINE_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' $ENGINE_CONTAINER_ID)
              echo "Engine Container IP is $ENGINE_IP"
              docker cp . $TEST_CONTAINER_ID:/go
              docker exec $TEST_CONTAINER_ID /bin/sh -c 'apk update && apk add --no-cache socat bash make'
              docker exec -d $TEST_CONTAINER_ID /bin/bash -c "socat TCP-LISTEN:9076,fork TCP:$ENGINE_IP:9076"
              docker exec $TEST_CONTAINER_ID /bin/bash -c "go test /go/src/github.com/qlik-oss/core-cli/test/cli_integration_test.go --engineIP $ENGINE_IP:9076"